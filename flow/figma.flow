// @flow

// To parse this data:
//
//   const Convert = require("./file");
//
//   const comment = Convert.toComment(json);
//   const user = Convert.toUser(json);
//   const color = Convert.toColor(json);
//   const constraint = Convert.toConstraint(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.

/**
 * A comment or reply left by a user
 */
export type Comment = {
    /**
     * Unique identifier for comment
     */
    id: string;
    /**
     * The file in which the comment lives
     */
    file_key: string;
    /**
     * If present, the id of the comment to which this is the reply
     */
    parent_id?: string;
    /**
     * The user who left the comment
     */
    user: CommentUser;
};

/**
 * A description of a user
 *
 * The user who left the comment
 */
export type CommentUser = {
    handle:  string;
    img_url: string;
};

/**
 * A description of a user
 */
export type User = {
    handle:  string;
    img_url: string;
};

/**
 * An RGBA color
 */
export type Color = {
    /**
     * Red channel value, between 0 and 1
     */
    r: number;
    /**
     * Green channel value, between 0 and 1
     */
    g: number;
    /**
     * Blue channel value, between 0 and 1
     */
    b: number;
    /**
     * Alpha channel value, between 0 and 1
     */
    a: number;
};

/**
 * Sizing constraint for exports
 */
export type Constraint = {
    /**
     * Type of constraint to apply; string enum with potential values below
     *
     * * "SCALE": Scale by value
     * * "WIDTH": Scale proportionally and set width to value
     * * "HEIGHT": Scale proportionally and set height to value
     */
    type: Type;
    /**
     * See type property for effect of this field
     */
    value?: number;
};

/**
 * Type of constraint to apply; string enum with potential values below
 *
 * * "SCALE": Scale by value
 * * "WIDTH": Scale proportionally and set width to value
 * * "HEIGHT": Scale proportionally and set height to value
 */
export type Type =
      "HEIGHT"
    | "SCALE"
    | "WIDTH";

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toComment(json: string): Comment {
    return cast(JSON.parse(json), o("Comment"));
}

function commentToJson(value: Comment): string {
    return JSON.stringify(value, null, 2);
}

function toUser(json: string): User {
    return cast(JSON.parse(json), o("User"));
}

function userToJson(value: User): string {
    return JSON.stringify(value, null, 2);
}

function toColor(json: string): Color {
    return cast(JSON.parse(json), o("Color"));
}

function colorToJson(value: Color): string {
    return JSON.stringify(value, null, 2);
}

function toConstraint(json: string): Constraint {
    return cast(JSON.parse(json), o("Constraint"));
}

function constraintToJson(value: Constraint): string {
    return JSON.stringify(value, null, 2);
}

function cast<T>(obj: any, typ: any): T {
    if (!isValid(typ, obj)) {
        throw `Invalid value`;
    }
    return obj;
}

function isValid(typ: any, val: any): boolean {
    if (typ === undefined) return true;
    if (typ === null) return val === null || val === undefined;
    return typ.isUnion  ? isValidUnion(typ.typs, val)
            : typ.isArray  ? isValidArray(typ.typ, val)
            : typ.isMap    ? isValidMap(typ.typ, val)
            : typ.isEnum   ? isValidEnum(typ.name, val)
            : typ.isObject ? isValidObject(typ.cls, val)
            :                isValidPrimitive(typ, val);
}

function isValidPrimitive(typ: string, val: any) {
    return typeof typ === typeof val;
}

function isValidUnion(typs: any[], val: any): boolean {
    // val must validate against one typ in typs
    return typs.find(typ => isValid(typ, val)) !== undefined;
}

function isValidEnum(enumName: string, val: any): boolean {
    const cases = typeMap[enumName];
    return cases.indexOf(val) !== -1;
}

function isValidArray(typ: any, val: any): boolean {
    // val must be an array with no invalid elements
    return Array.isArray(val) && val.every(element => {
        return isValid(typ, element);
    });
}

function isValidMap(typ: any, val: any): boolean {
    if (val === null || typeof val !== "object" || Array.isArray(val)) return false;
    // all values in the map must be typ
    return Object.keys(val).every(prop => {
        if (!Object.prototype.hasOwnProperty.call(val, prop)) return true;
        return isValid(typ, val[prop]);
    });
}

function isValidObject(className: string, val: any): boolean {
    if (val === null || typeof val !== "object" || Array.isArray(val)) return false;
    let typeRep = typeMap[className];
    return Object.keys(typeRep).every(prop => {
        if (!Object.prototype.hasOwnProperty.call(typeRep, prop)) return true;
        return isValid(typeRep[prop], val[prop]);
    });
}

function a(typ: any) {
    return { typ, isArray: true };
}

function e(name: string) {
    return { name, isEnum: true };
}

function u(...typs: any[]) {
    return { typs, isUnion: true };
}

function m(typ: any) {
    return { typ, isMap: true };
}

function o(className: string) {
    return { cls: className, isObject: true };
}

const typeMap: any = {
    "Comment": {
        id: "",
        file_key: "",
        parent_id: u(null, ""),
        user: o("CommentUser"),
    },
    "CommentUser": {
        handle: "",
        img_url: "",
    },
    "User": {
        handle: "",
        img_url: "",
    },
    "Color": {
        r: 3.14,
        g: 3.14,
        b: 3.14,
        a: 3.14,
    },
    "Constraint": {
        type: e("Type"),
        value: u(null, 3.14),
    },
    "Type": [
        "HEIGHT",
        "SCALE",
        "WIDTH",
    ],
};

module.exports = {
    "commentToJson": commentToJson,
    "toComment": toComment,
    "userToJson": userToJson,
    "toUser": toUser,
    "colorToJson": colorToJson,
    "toColor": toColor,
    "constraintToJson": constraintToJson,
    "toConstraint": toConstraint,
};
