{
  "$schema": "http://json-schema.org/schema",
  "definitions": {
    "Global": {
      "type": "object",
      "description": "Properties are shared across all nodes",
      "properties": {
        "id": {
          "type": "string",
          "description":
            "A string uniquely identifying this node within the document"
        },
        "name": {
          "type": "string",
          "description": "The name given to the node by the user in the tool"
        },
        "visible": {
          "type": "boolean",
          "description": "Whether or not the node is visible on the canvas"
        },
        "type": {
          "type": "string",
          "description": "The type of the node",
          "enum": [
            "DOCUMENT",
            "CANVAS",
            "FRAME",
            "GROUP",
            "VECTOR",
            "BOOLEAN",
            "STAR",
            "LINE",
            "ELLIPSE",
            "REGULAR_POLYGON",
            "RECTANGLE",
            "TEXT",
            "SLICE",
            "COMPONENT",
            "INSTANCE"
          ]
        }
      },
      "required": ["id", "name", "visible", "type"]
    },
    "Node": {
      "type": "object",
      "oneOf": [
        { "$ref": "#/definitions/DocumentNode" },
        { "$ref": "#/definitions/CanvasNode" }
      ]
    },
    "DocumentNode": {
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/Global" },
        {
          "properties": {
            "children": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              },
              "description": "An array of canvases attached to the document"
            }
          },
          "required": ["children"]
        }
      ]
    },
    "CanvasNode": {
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/Global" },
        {
          "properties": {
            "children": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              },
              "description": "An array of top level layers on the canvas"
            },
            "backgroundColor": {
              "$ref": "#/definitions/Color",
              "description": "Background color of the canvas"
            },
            "exportSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExportSetting"
              },
              "description":
                "An array of export settings representing images to export from the canvas"
            }
          },
          "required": ["children", "backgroundColor", "exportSettings"]
        }
      ]
    },
    "FrameNode": {
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/Global" },
        {
          "properties": {
            "children": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              },
              "description":
                "An array of nodes that are direct children of this node"
            },
            "backgroundColor": {
              "$ref": "#/definitions/Color",
              "description": "Background color of the node"
            },
            "exportSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExportSetting"
              },
              "description":
                "An array of export settings representing images to export from node"
            },
            "blendMode": {
              "$ref": "#/definitions/BlendMode",
              "description":
                "How this node blends with nodes behind it in the scene (see blend mode section for more details)"
            },
            "preserveRatio": {
              "type": "boolean",
              "description":
                "How this node blends with nodes behind it in the scene (see blend mode section for more details)"
            },
            "constraints": {
              "$ref": "#/definitions/LayoutConstraint",
              "description":
                "How this node blends with nodes behind it in the scene (see blend mode section for more details)"
            },
            "transitionNodeID": {
              "type": "string",
              "description": "Node ID of node to transition to in prototyping"
            },
            "opacity": {
              "type": "number",
              "description": "Opacity of the node"
            },
            "absoluteBoundingBox": {
              "$ref": "#/definitions/Rectangle",
              "description":
                "Bounding box of the node in absolute space coordinates"
            },
            "clipsContent": {
              "type": "boolean",
              "description":
                "Does this node clip content outside of its bounds?"
            },
            "layoutGrids": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LayoutGrid"
              },
              "description":
                "An array of layout grids attached to this node (see layout grids section for more details). GROUP nodes do not have this attribute"
            },
            "effects": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Effect"
              },
              "description":
                "An array of effects attached to this node (see effects section for more details)"
            },
            "isMask": {
              "type": "boolean",
              "description": "Does this node mask sibling nodes in front of it?"
            }
          },
          "required": [
            "children",
            "backgroundColor",
            "exportSettings",
            "blendMode",
            "preserveRatio",
            "constraints",
            "opacity",
            "absoluteBoundingBox",
            "clipsContent",
            "layoutGrids",
            "effects",
            "isMask"
          ]
        }
      ]
    },
    "GroupNode": {
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/FrameNode" }]
    },
    "VectorNode": {
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/Global" },
        {
          "properties": {
            "exportSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExportSetting"
              },
              "description":
                "An array of export settings representing images to export from node"
            },
            "blendMode": {
              "$ref": "#/definitions/BlendMode",
              "description":
                "How this node blends with nodes behind it in the scene (see blend mode section for more details)"
            },
            "preserveRatio": {
              "type": "boolean",
              "description":
                "How this node blends with nodes behind it in the scene (see blend mode section for more details)"
            },
            "constraints": {
              "$ref": "#/definitions/LayoutConstraint",
              "description":
                "How this node blends with nodes behind it in the scene (see blend mode section for more details)"
            },
            "transitionNodeID": {
              "type": "string",
              "description": "Node ID of node to transition to in prototyping"
            },
            "opacity": {
              "type": "number",
              "description": "Opacity of the node"
            },
            "absoluteBoundingBox": {
              "$ref": "#/definitions/Rectangle",
              "description":
                "Bounding box of the node in absolute space coordinates"
            },
            "effects": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Effect"
              },
              "description":
                "An array of effects attached to this node (see effects section for more details)"
            },
            "isMask": {
              "type": "boolean",
              "description": "Does this node mask sibling nodes in front of it?"
            },
            "fills": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Paint"
              },
              "description": "An array of fill paints applied to the node"
            },
            "strokes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Paint"
              },
              "description": " An array of stroke paints applied to the node"
            },
            "strokeWeight": {
              "type": "number",
              "description": "The weight of strokes on the node"
            },
            "strokeAlign": {
              "enum": ["INSIDE", "OUTSIDE", "CENTER"],
              "description":
                "Where stroke is drawn relative to the vector outline as a string enum \n\n* INSIDE: draw stroke inside the shape boundary \n* OUTSIDE: draw stroke outside the shape boundary \n* CENTER: draw stroke centered along the shape boundary"
            }
          },
          "required": [
            "exportSettings",
            "blendMode",
            "preserveRatio",
            "constraints",
            "opacity",
            "absoluteBoundingBox",
            "effects",
            "isMask",
            "fills",
            "strokes",
            "strokeWeight",
            "strokeAlign"
          ]
        }
      ]
    },
    "BooleanNode": {
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/VectorNode" },
        {
          "properties": {
            "children": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              },
              "description":
                "An array of nodes that are being boolean operated on"
            }
          },
          "required": ["children"]
        }
      ]
    },
    "StarNode": {
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/VectorNode" }]
    },
    "LineNode": {
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/VectorNode" }]
    },
    "EllipseNode": {
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/VectorNode" }]
    },
    "RegularPolygonNode": {
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/VectorNode" }]
    },
    "Comment": {
      "type": "object",
      "description": "A comment or reply left by a user",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for comment"
        },
        "file_key": {
          "type": "string",
          "description": "The file in which the comment lives"
        },
        "parent_id": {
          "type": "string",
          "description":
            "If present, the id of the comment to which this is the reply"
        },
        "user": {
          "$ref": "#/definitions/User",
          "description": "The user who left the comment"
        }
      },
      "required": ["id", "file_key", "user"]
    },
    "User": {
      "type": "object",
      "description": "A description of a user",
      "properties": {
        "handle": { "type": "string" },
        "img_url": { "type": "string" }
      },
      "required": ["handle", "img_url"]
    },
    "Color": {
      "type": "object",
      "description": "An RGBA color",
      "properties": {
        "r": {
          "type": "number",
          "description": "Red channel value, between 0 and 1"
        },
        "g": {
          "type": "number",
          "description": "Green channel value, between 0 and 1"
        },
        "b": {
          "type": "number",
          "description": "Blue channel value, between 0 and 1"
        },
        "a": {
          "type": "number",
          "description": "Alpha channel value, between 0 and 1"
        }
      },
      "required": ["r", "g", "b", "a"]
    },
    "Vector": {
      "type": "object",
      "description": "A 2d vector",
      "properties": {
        "x": {
          "type": "number",
          "description": "X coordinate of the vector"
        },
        "y": {
          "type": "number",
          "description": "Y coordinate of the vector"
        }
      },
      "required": ["x", "y"]
    },
    "Rectangle": {
      "type": "object",
      "description":
        "A rectangle that expresses a bounding box in absolute coordinates",
      "properties": {
        "x": {
          "type": "number",
          "description": "X coordinate of top left corner of the rectangle"
        },
        "y": {
          "type": "number",
          "description": "Y coordinate of top left corner of the rectangle"
        },
        "width": {
          "type": "number",
          "description": "Width of the rectangle"
        },
        "height": {
          "type": "number",
          "description": "Height of the rectangle"
        }
      },
      "required": ["x", "y", "width", "height"]
    },
    "ExportSetting": {
      "type": "object",
      "description": "Format and size to export an asset at",
      "properties": {
        "suffix": {
          "type": "string",
          "description": "File suffix to append to all filenames"
        },
        "format": {
          "enum": ["JPG", "PNG", "SVG"],
          "description":
            "Type of constraint to apply; string enum with potential values below\n\n  * \"SCALE\": Scale by value\n  * \"WIDTH\": Scale proportionally and set width to value\n  * \"HEIGHT\": Scale proportionally and set height to value"
        },
        "constraint": {
          "$ref": "#/definitions/Constraint",
          "description": "Constraint that determines sizing of exported asset"
        }
      },
      "required": ["suffix", "format", "constraint"]
    },
    "Paint": {
      "type": "object",
      "description":
        "A solid color, gradient, or image texture that can be applied as fills or strokes",
      "properties": {
        "type": {
          "enum": [
            "SOLID",
            "GRADIENT_LINEAR",
            "GRADIENT_RADIAL",
            "GRADIENT_ANGULAR",
            "GRADIENT_DIAMOND",
            "IMAGE",
            "EMOJI"
          ],
          "description": "Type of paint as a string enum"
        },
        "visible": {
          "type": "boolean",
          "description": "Is the paint enabled?"
        },
        "opacity": {
          "type": "number",
          "description":
            "Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "description": "(For solid paints) Solid color of the paint"
        },
        "gradientHandlePositions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vector"
          },
          "description":
            "(For gradient paints) This field contains three vectors, each of which are a position in normalized object space (normalized object space is if the top left corner of the bounding box of the object is (0, 0) and the bottom right is (1,1)). The first position corresponds to the start of the gradient (value 0 for the purposes of calculating gradient stops), the second position is the end of the gradient (value 1), and the third handle position determines the width of the gradient (only relevant for non-linear gradients)."
        },
        "gradientStops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColorStop"
          },
          "description":
            "(For gradient paints) Positions of key points along the gradient axis with the colors anchored there. Colors along the gradient are interpolated smoothly between neighboring gradient stops."
        },
        "scaleMode": {
          "enum": ["FILL", "FIT", "TILE", "STRETCH"],
          "description": "(For image paints) Image scaling mode"
        }
      },
      "required": ["type", "visible", "opacity"]
    },
    "LayoutConstraint": {
      "type": "object",
      "description": "Layout constraint relative to containing Frame",
      "properties": {
        "vertical": {
          "enum": ["TOP", "BOTTOM", "CENTER", "TOP_BOTTOM", "SCALE"],
          "description":
            "* TOP: Node is laid out relative to top of the containing frame\n * BOTTOM: Node is laid out relative to bottom of the containing frame\n * CENTER: Node is vertically centered relative to containing frame\n * TOP_BOTTOM: Both top and bottom of node are constrained relative to containing frame (node stretches with frame)\n * SCALE: Node scales vertically with containing frame"
        },
        "horizontal": {
          "enum": ["LEFT", "RIGHT", "CENTER", "LEFT_RIGHT", "SCALE"],
          "description":
            "* LEFT: Node is laid out relative to left of the containing frame \n* RIGHT: Node is laid out relative to right of the containing frame \n* CENTER: Node is horizontally centered relative to containing frame \n* LEFT_RIGHT: Both left and right of node are constrained relative to containing frame (node stretches with frame) \n* SCALE: Node scales horizontally with containing frame"
        }
      },
      "required": ["vertical", "horizontal"]
    },
    "LayoutGrid": {
      "type": "object",
      "description": "Guides to align and place objects within a frame",
      "properties": {
        "pattern": {
          "enum": ["COLUMNS", "ROWS", "GRID"],
          "description":
            "* COLUMNS: Vertical grid \n* ROWS: Horizontal grid \n* GRID: Square grid"
        },
        "sectionSize": {
          "type": "number",
          "description":
            "Width of column grid or height of row grid or square grid spacing"
        },
        "visible": {
          "type": "boolean",
          "description": "Is the grid currently visible?"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "description": "Color of the grid"
        },
        "alignment": {
          "enum": ["MIN", "MAX", "CENTER"],
          "description":
            "Positioning of grid as a string enum \n \n* MIN: Grid starts at the left or top of the frame \n* MAX: Grid starts at the right or bottom of the frame \n* CENTER: Grid is center aligned"
        },
        "gutterSize": {
          "type": "number",
          "description": "Spacing in between columns and rows"
        },
        "offset": {
          "type": "number",
          "description": "Spacing before the first column or row"
        },
        "count": {
          "type": "number",
          "description": "Number of columns or rows"
        }
      },
      "required": [
        "pattern",
        "sectionSize",
        "visible",
        "color",
        "alignment",
        "gutterSize",
        "offset",
        "count"
      ]
    },
    "ColorStop": {
      "type": "object",
      "description": "A position color pair representing a gradient stop",
      "properties": {
        "color": {
          "$ref": "#/definitions/Color",
          "description": "Color attached to corresponding position"
        },
        "position": {
          "type": "number",
          "description":
            "Value between 0 and 1 representing position along gradient axis"
        }
      },
      "required": ["color", "position"]
    },
    "Constraint": {
      "type": "object",
      "description": "Sizing constraint for exports",
      "properties": {
        "type": {
          "enum": ["SCALE", "WIDTH", "HEIGHT"],
          "description":
            "Type of constraint to apply; string enum with potential values below\n\n  * \"SCALE\": Scale by value\n  * \"WIDTH\": Scale proportionally and set width to value\n  * \"HEIGHT\": Scale proportionally and set height to value"
        },
        "value": {
          "type": "number",
          "description": "See type property for effect of this field"
        }
      },
      "required": ["type"]
    },
    "Effect": {
      "type": "object",
      "description": "A visual effect such as a shadow or blur",
      "properties": {
        "type": {
          "enum": [
            "INNER_SHADOW",
            "DROP_SHADOW",
            "LAYER_BLUR",
            "BACKGROUND_BLUR"
          ],
          "description": "Type of effect as a string enum"
        },
        "radius": {
          "type": "number",
          "description": "See type property for effect of this field"
        },
        "visible": {
          "type": "boolean",
          "description": "See type property for effect of this field"
        },
        "color": {
          "$ref": "#/definitions/Color",
          "description": "See type property for effect of this field"
        },
        "blendMode": {
          "$ref": "#/definitions/BlendMode",
          "description": "See type property for effect of this field"
        },
        "offset": {
          "$ref": "#/definitions/Vector",
          "description": "See type property for effect of this field"
        }
      },
      "required": ["type", "radius", "visible", "color", "blendMode", "offset"]
    },
    "BlendMode": {
      "type": "string",
      "description": "Enum describing how layer blends with layers below",
      "enum": [
        "PASS_THROUGH",
        "NORMAL",

        "DARKEN",
        "MULTIPLY",
        "LINEAR_BURN",
        "COLOR_BURN",

        "LIGHTEN",
        "SCREEN",
        "LINEAR_DODGE",
        "COLOR_DODGE",

        "OVERLAY",
        "SOFT_LIGHT",
        "HARD_LIGHT",

        "DIFFERENCE",
        "EXCLUSION",

        "HUE",
        "SATURATION",
        "COLOR",
        "LUMINOSITY"
      ]
    }
  }
}
